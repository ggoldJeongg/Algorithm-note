// 문제 설명 : n이 90보다 작거나 같은 자연수일때의 피보나치수를 구하기
// 핵심 개념 : 다이나믹 프로그래밍 기초, BigInt

const n = require("fs").readFileSync("/dev/stdin").toString() * 1;

const DP = [0, 1]; // 배열 초기화 : 0, 1부터 시작

for (let i = 1; i < n; i++) {
  // 점화식 사용
  // F(n) = F(n-1) + F(n-2)
  // 중복 계산 방지 : DP[i],  DP[i - 1], DP[i + 1]
  DP[i + 1] = BigInt(DP[i]) + BigInt(DP[i - 1]);
}

// 변환된 DP 배열값을 문자로 출력
console.log(DP[n].toString());

// 선택 알고리즘 : 다이나믹 프로그래밍
// 피보나치 수열을 단순 재귀로 구현시 F(n) / F(n-1) / F(n-2) 각 구간마다 중복계산이 계속 일어난다.
// 이미 계산된 값을 저장해서 중복 연산을 피하고 시간복잡도를 줄이기 위해 사용

// 점화식 : 주어진 문제의 해를 작은 문제의 해를 통해 표현식을 정의
// 중복 계산 방지 : 이미 계산된 값들을 배열에 저장하고 나중에 필요할 때 다시 계산하지 않고 저장값을 재사용
// 시간복잡도 : O(n). 중복 계산 방지를 통해 반복문이 1부터 n-1까지 반복되기 때문에. 반복문 이외 계산은 O(1)이다.
// BigInt : Number 원시 값이 안정적으로 나타낼 수 있는 최대치인 2^53 - 1보다 큰 정수를 표현할 수 있는 JS 내장 객체
